import TelegramBot, { KeyboardButton, Message, ParseMode, ReplyKeyboardMarkup, ReplyKeyboardRemove, SendBasicOptions } from "node-telegram-bot-api";
import { ShavermaSize } from "src/states";
import { Customer } from "./customer.class";
import { Shaverma } from "./shaverma.class";
import { ShavermaShop } from "./shaverma-shop.class";

import * as fs from 'fs';

export class MessageHandler {
    protected readonly shop: ShavermaShop = new ShavermaShop();
    constructor(protected readonly bot: TelegramBot) {}

    public onCompleted = ({chat: {username}}: Message, match: RegExpExecArray) => {
        const adminMessage = match[1] ? match[1] : "–≤ –∫–∞–±–∏–Ω–µ—Ç–µ 6.22";
        if (this.shop.isAdmin(username)) {
            this.notifyAllOnDelivery(adminMessage);
        }
    }
    public onMakeOrder = ({chat: {id}}: Message) => {
        if (!this.shop.isRightTime() || !this.shop.isOpen) {
            this.bot.sendMessage(id, "–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è");
            return;
        }
        if (!this.shop.hasOrder(id)) {
            this.chooseType(id);
        } else {
            this.handleSecondOrder(id);
        }
    }
    public onMessage = ({chat: {id, username}, text}: Message) => {
        if (this.shop.isLabel(text) && !this.shop.hasOrder(id)) {
            const shaverma = this.shop.getNew(text);
            shaverma.customer = new Customer(id, username);
            this.shop.add(shaverma);
            this.chooseSize(id);
            return;
        }
    
        if (this.shop.isSizeLabel(text)) {
            const shaverma = this.shop.get(id);
            const size: ShavermaSize = this.shop.getSize(text);
            shaverma.setSize(size);
            const { caption, price } = shaverma;
    
            this.notifyClient(id, caption, text);
            setTimeout(() => {
                this.sendPriceInfo(id, price);
            }, 200);
            this.notifyAdmin(shaverma, text);
        }
        if (text === '–æ—Ç–º–µ–Ω–∏—Ç—å') {
            this.cancelOrder(id)
        }
        if (text === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
            this.notifyOrderSaved(id);
        }
    }

    public sendInfo = ({chat: {id}}: Message) => {
        this.bot.sendMessage(id, info);
    }
    public onGetImage = ({chat: {id}}: Message) => {
        fs.readFile("image.jpg", (err, data) => {
            if (err) {
                this.bot.sendMessage(id, "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...");
            } else {
                this.bot.sendPhoto(id, data);
            }
        });
    }
    public cancelOrder(chatId: number) {
        const found: Shaverma | null = this.shop.get(chatId);
        if (!found) {
            this.bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
            return;
        }
        const {caption, username, size} = found;
        const sizeCaption = this.shop.getSizeCaption(size);
        this.shop.cancel(chatId);

        this.bot.sendMessage(chatId, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω', {...keyboardOff});
        this.bot.sendMessage(chatId, `–û—Ç–º–µ–Ω—ë–Ω –∑–∞–∫–∞–∑ –¥–ª—è ${username}, –¥–µ—Ç–∞–ª–∏: ${caption} ${sizeCaption}`);
    }
    public getStatus = ({chat: {id}}: Message) => {
        const order = this.shop.get(id);
        if (!order) {
            this.bot.sendMessage(id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
        } else {
            const { caption, size } = order;
            const sizeCaption = this.shop.getSizeCaption(size);
            this.bot.sendMessage(id, `–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ ${caption}, ${sizeCaption}`);
        }
    }
    public getShopStatus = ({chat: {id}}: Message) => {
        const status = this.shop.isOpen();
        if (status) {
            this.bot.sendMessage(id, '–°–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        } else {
            this.bot.sendMessage(id, '–°–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞ `–Ω–µ` —Ä–∞–±–æ—Ç–∞–µ—Ç(', {...markdown})
        }
    }
    public onToggleShopState = ({chat:{id, username}}: Message) => {
        if (this.shop.isAdmin(username)) {
            const status = this.shop.toggleOpen();
            this.bot.sendMessage(id, `status is ${status}`);
        } else {
            this.bot.sendMessage(id, `You're not authorized for this operation`);
        }
    }

    protected notifyAllOnDelivery(text: string) {
        const orders = this.shop.getAll();
        orders.map(order => {
            const { size } = order;
            
            const sizeCaption = this.shop.getSizeCaption(size);
            this.bot.sendMessage(order.chatId, `${order.caption} ${sizeCaption} üåØ - –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å ${text}`)
        })
    
        setTimeout(() => {
            this.shop.cancelAll();
        }, 5000);
    }
    protected chooseType(id: number) {
        this.bot.sendMessage(id, "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≤–µ—Ä–º—É", {...choices});
    }
    protected handleSecondOrder(chatId: number) {
        const { caption, size } = this.shop.get(chatId);

        const sizeCaption = this.shop.getSizeCaption(size);
        this.bot.sendMessage(
            chatId,
            `–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑! ${caption} üåØ, ${sizeCaption}. –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑?`, {
            reply_markup: {keyboard: [[{text: "–æ—Ç–º–µ–Ω–∏—Ç—å"}, {text: "–æ—Å—Ç–∞–≤–∏—Ç—å"}]]}
        });
    }
    protected chooseSize(id: number) {
        const shaverma = this.shop.get(id);
        const [wxs, wm, wxl] = shaverma.weights;
        const [pxs, pm, pxl] = shaverma.prices;
        const text = `
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä. 
XS - ${wxs}–≥, ${pxs} —Ä—É–±, 
M - ${wm}–≥, ${pm} —Ä—É–±,
XL - ${wxl}–≥, ${pxl} —Ä—É–±`;

        this.bot.sendMessage(id, text, {...sizes})
    }
    protected notifyClient(id: number, caption: string, text: string) {
        this.bot.sendMessage(
            id, 
            `–í–∞—à–∞ ${caption} üåØ , ${text}, —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ \`13:10\`-\`13:20\``, 
            {...markdown}
        );
    }
    protected notifyAdmin({caption, price, username}: Shaverma, sizeCaption: string) {
        this.bot.sendMessage(
            this.shop.getAdminId(), 
            `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! ${caption}, ${sizeCaption}, ${price} —Ä—É–±, –¥–ª—è ${username}`
        );
    }
    protected sendPriceInfo(id: number, price: number) {
        this.bot.sendMessage(id, `–° –≤–∞—Å \`${price} \` —Ä—É–±, –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Å–±–ø \`7 950 039 60 55\`, –∞–ª—å—Ñ–∞–±–∞–Ω–∫`, {
            ...keyboardOff,
            ...markdown
        });
    }
    protected notifyOrderSaved(chatId: number) {
        this.bot.sendMessage(chatId, "–ó–∞–∫–∞–∑ –≤ —Å–∏–ª–µ. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ \`13.10\`-\`13.20\`", {
            ...keyboardOff,
            ...markdown
        })
    }
}

const sizeButtons: KeyboardButton[][] = [
    [{text: 'XS (–º–∞–ª–µ–Ω—å–∫–∞—è)'}],
    [{text: 'M (—Å—Ä–µ–¥–Ω—è—è)'}],
    [{text: 'XL (–±–æ–ª—å—à–∞—è)'}]
];
const choiceButtons: KeyboardButton[][] = [
    [{text: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è"}, {text:"–°—ã—Ä–Ω–∞—è"}],
    [{text: "–ì—Ä–∏–±–Ω–∞—è"}, {text: "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è"}],
    [{text: "–ú—è—Å–æ-–º–∏–∫—Å"}, {text: "–ì—Ä–µ—á–µ—Å–∫–∞—è"}],
    // ["–§–∞–ª–∞—Ñ–µ–ª—å"],
]

const markdown: {parse_mode: ParseMode} = {parse_mode: 'Markdown'}
const keyboardOff: {reply_markup: ReplyKeyboardRemove} = {
    reply_markup: {
        remove_keyboard: true
    }
}
const choices: TBotReply = {
    reply_markup: {
        keyboard: choiceButtons
    }
}
const sizes: TBotReply = {
    reply_markup: {
        keyboard: sizeButtons
    }
}
type TBotReply = {reply_markup: {keyboard: KeyboardButton[][]}};

const info = `
/make_order - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑

/is_open - —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞

/get - –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç

/status - —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑

/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
`;
